#!/usr/bin/env python3
"""
Health Check Script f√ºr Document Intelligence System
√úberpr√ºft ob alle Fixes korrekt angewendet wurden
"""

import subprocess
import requests
import json
import os
from pathlib import Path
import time

def check_docker_services():
    """Pr√ºfe Docker Services"""
    print("\nüê≥ DOCKER SERVICES CHECK")
    print("-" * 40)
    
    try:
        result = subprocess.run(['docker', 'compose', 'ps'], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ Docker Compose l√§uft")
        print(result.stdout)
        
        # Pr√ºfe spezifische Services
        services = ['redis', 'search_api', 'ocr_agent', 'indexer', 'watchdog']
        for service in services:
            if service in result.stdout and 'Up' in result.stdout:
                print(f"‚úÖ {service} l√§uft")
            else:
                print(f"‚ùå {service} l√§uft nicht")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Docker Compose Fehler: {e}")
        return False

def check_api_endpoints():
    """Pr√ºfe API Endpoints"""
    print("\nüåê API ENDPOINTS CHECK")
    print("-" * 40)
    
    endpoints = [
        ("Search API Health", "http://localhost:8001/health"),
        ("Search API Root", "http://localhost:8001/"),
        ("N8N", "http://localhost:5678"),
        ("Open WebUI", "http://localhost:8080"),
    ]
    
    results = {}
    
    for name, url in endpoints:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name}: {response.status_code}")
                results[name] = True
            else:
                print(f"‚ö†Ô∏è {name}: {response.status_code}")
                results[name] = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {name}: {str(e)}")
            results[name] = False
    
    return all(results.values())

def check_logs_for_errors():
    """Pr√ºfe Docker Logs auf kritische Fehler"""
    print("\nüìã LOGS CHECK")
    print("-" * 40)
    
    try:
        # Hole letzte Logs
        result = subprocess.run(['docker', 'compose', 'logs', '--tail=50'], 
                              capture_output=True, text=True, check=True)
        
        logs = result.stdout.lower()
        
        # Pr√ºfe auf kritische Fehler
        critical_errors = [
            'filenotfounderror',
            'no such file or directory',
            'connection refused',
            'failed to',
            'error:'
        ]
        
        error_count = 0
        for error in critical_errors:
            count = logs.count(error)
            if count > 0:
                print(f"‚ö†Ô∏è '{error}' gefunden: {count}x")
                error_count += count
        
        # Pr√ºfe auf spezifische Fixes
        fixed_issues = [
            ('cors_allow_origin', 'CORS korrekt konfiguriert'),
            ('user_agent', 'User Agent gesetzt'),
            ('torch==2.1.0', 'PyTorch Version korrekt')
        ]
        
        for issue, description in fixed_issues:
            if issue in logs:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ÑπÔ∏è {description} nicht in Logs sichtbar")
        
        if error_count == 0:
            print("‚úÖ Keine kritischen Fehler in Logs")
            return True
        else:
            print(f"‚ö†Ô∏è {error_count} potentielle Probleme gefunden")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Logs Check Fehler: {e}")
        return False

def check_environment_variables():
    """Pr√ºfe .env Konfiguration"""
    print("\n‚öôÔ∏è ENVIRONMENT VARIABLES CHECK")
    print("-" * 40)
    
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå .env Datei nicht gefunden")
        return False
    
    content = env_file.read_text()
    
    required_vars = {
        'CORS_ALLOW_ORIGIN': 'CORS Origins',
        'USER_AGENT': 'User Agent',
        'CHROMA_TELEMETRY': 'ChromaDB Telemetrie',
        'TORCH_VERSION': 'PyTorch Version',
        'LOG_PATH': 'Log Pfad'
    }
    
    all_found = True
    for var, description in required_vars.items():
        if f"{var}=" in content:
            print(f"‚úÖ {description} konfiguriert")
        else:
            print(f"‚ùå {description} fehlt")
            all_found = False
    
    return all_found

def check_python_dependencies():
    """Pr√ºfe Python Dependencies"""
    print("\nüêç PYTHON DEPENDENCIES CHECK")
    print("-" * 40)
    
    # Pr√ºfe ob venv existiert
    venv_path = Path("venv")
    if not venv_path.exists():
        print("‚ùå Virtual Environment nicht gefunden")
        return False
    
    # Pr√ºfe PyTorch Version
    if os.name == 'nt':  # Windows
        pip_cmd = "venv\\Scripts\\pip"
    else:  # Linux/Mac
        pip_cmd = "venv/bin/pip"
    
    try:
        result = subprocess.run([pip_cmd, 'show', 'torch'], 
                              capture_output=True, text=True, check=True)
        
        if "Version: 2.1.0" in result.stdout:
            print("‚úÖ PyTorch 2.1.0 installiert")
        else:
            print("‚ö†Ô∏è PyTorch Version m√∂glicherweise falsch")
            print(result.stdout)
        
        # Pr√ºfe andere wichtige Pakete
        packages = ['spacy', 'fastapi', 'redis', 'sentence-transformers']
        for package in packages:
            try:
                subprocess.run([pip_cmd, 'show', package], 
                             capture_output=True, text=True, check=True)
                print(f"‚úÖ {package} installiert")
            except subprocess.CalledProcessError:
                print(f"‚ùå {package} fehlt")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Dependency Check Fehler: {e}")
        return False

def test_search_functionality():
    """Teste Suchfunktionalit√§t"""
    print("\nüîç SEARCH FUNCTIONALITY TEST")
    print("-" * 40)
    
    try:
        # Teste einfache Suche
        search_data = {
            "query": "test",
            "limit": 5
        }
        
        response = requests.post(
            "http://localhost:8001/search",
            json=search_data,
            timeout=10
        )
        
        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ Suche funktional - {len(results)} Ergebnisse")
            return True
        else:
            print(f"‚ö†Ô∏è Suche Statuscode: {response.status_code}")
            print(response.text)
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Such-Test Fehler: {str(e)}")
        return False

def generate_test_document():
    """Erstelle Test-Dokument"""
    print("\nüìÑ TEST DOCUMENT CREATION")
    print("-" * 40)
    
    test_doc_path = Path("data/health_check_test.txt")
    
    # Stelle sicher dass data Verzeichnis existiert
    test_doc_path.parent.mkdir(exist_ok=True)
    
    test_content = f"""Health Check Test Document
Created: {time.strftime('%Y-%m-%d %H:%M:%S')}

This is a test document to verify the Document Intelligence System is working correctly.

Features being tested:
- File detection by Watchdog
- OCR processing 
- Index generation
- Search functionality

Test keywords: health check, system test, verification
"""
    
    test_doc_path.write_text(test_content, encoding='utf-8')
    print(f"‚úÖ Test-Dokument erstellt: {test_doc_path}")
    
    # Warte kurz auf Verarbeitung
    print("‚è≥ Warte 10 Sekunden auf Verarbeitung...")
    time.sleep(10)
    
    # Teste ob Dokument indiziert wurde
    try:
        response = requests.post(
            "http://localhost:8001/search",
            json={"query": "health check", "limit": 10},
            timeout=5
        )
        
        if response.status_code == 200:
            results = response.json()
            found = any("health" in r.get("title", "").lower() or 
                       "health" in r.get("snippet", "").lower() 
                       for r in results)
            
            if found:
                print("‚úÖ Test-Dokument wurde erfolgreich indiziert und gefunden")
                return True
            else:
                print("‚ö†Ô∏è Test-Dokument nicht in Suchergebnissen gefunden")
                return False
        else:
            print("‚ùå Suche nach Test-Dokument fehlgeschlagen")
            return False
            
    except Exception as e:
        print(f"‚ùå Test-Dokument Verifikation Fehler: {e}")
        return False

def main():
    """Hauptfunktion - f√ºhre alle Health Checks aus"""
    print("üè• Document Intelligence System - Health Check")
    print("=" * 60)
    
    checks = [
        ("Docker Services", check_docker_services),
        ("API Endpoints", check_api_endpoints),
        ("Environment Variables", check_environment_variables),
        ("Python Dependencies", check_python_dependencies),
        ("Log Analysis", check_logs_for_errors),
        ("Search Functionality", test_search_functionality),
        ("End-to-End Test", generate_test_document)
    ]
    
    results = {}
    
    for name, check_func in checks:
        print(f"\nüîç Pr√ºfe: {name}")
        try:
            results[name] = check_func()
        except Exception as e:
            print(f"‚ùå Fehler bei {name}: {e}")
            results[name] = False
    
    # Zusammenfassung
    print("\n" + "=" * 60)
    print("HEALTH CHECK ZUSAMMENFASSUNG")
    print("=" * 60)
    
    passed = sum(results.values())
    total = len(results)
    
    for name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{name:<25} {status}")
    
    print(f"\nGesamt: {passed}/{total} Tests bestanden")
    
    if passed == total:
        print("\nüéâ Alle Health Checks erfolgreich!")
        print("Das System l√§uft einwandfrei.")
    elif passed >= total * 0.8:
        print("\n‚ö†Ô∏è System l√§uft gr√∂√ütenteils korrekt.")
        print("Einige kleinere Probleme k√∂nnten bestehen.")
    else:
        print("\n‚ùå Kritische Probleme erkannt.")
        print("F√ºhre fix_docker_issues.py aus oder pr√ºfe die Logs.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
