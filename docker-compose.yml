version: '3.8'

services:
  # === DATABASE LAYER ===
  postgres:
    image: postgres:16-alpine
    container_name: semantic-doc-finder-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-semanticuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-semantic2024}
      POSTGRES_DB: ${POSTGRES_DB:-semantic_doc_finder}
      # Robustere PostgreSQL Settings
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_HOST_AUTH_METHOD: "md5"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-./postgresql_data}:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - semantic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-semanticuser} -d ${POSTGRES_DB:-semantic_doc_finder} && psql -U ${POSTGRES_USER:-semanticuser} -d ${POSTGRES_DB:-semantic_doc_finder} -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m
    restart: unless-stopped

  # === LLM LAYER ===
  ollama:
    image: ollama/ollama:latest
    container_name: semantic-doc-finder-ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      OLLAMA_KEEP_ALIVE: 24h
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MAX_LOADED_MODELS: 2        # Genau 2 Modelle parallel
      OLLAMA_NUM_PARALLEL: 2
      SEARCH_MODEL: gemma2:2b            # F端r Search (1.5GB)
      DEFAULT_MODEL: mistral             # F端r Enhancement (4.5GB)
    volumes:
      - ${OLLAMA_DATA_PATH:-./ollama_data}:/root/.ollama
    networks:
      - semantic_network
    deploy:
      resources:
        limits:
          memory: 8g                     # Reicht f端r beide Modelle!
        reservations:
          memory: 2g
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped

  # === PROCESSING LAYER ===
  ocr_agent:
    build:
      context: .
      dockerfile: agents/ocr/Dockerfile
    container_name: semantic-doc-finder-ocr
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-semanticuser}:${POSTGRES_PASSWORD:-semantic2024}@postgres:5432/${POSTGRES_DB:-semantic_doc_finder}
      CHUNK_SIZE: ${CHUNK_SIZE:-1000}
      TESSERACT_LANG: ${TESSERACT_LANG:-deu+eng}
      PYTHONUNBUFFERED: 1
    volumes:
      - ${DOCUMENTS_PATH:-./data}:/data:ro
      - ${LOGS_PATH:-./logs}:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - semantic_network
    deploy:
      resources:
        limits:
          memory: 6g
        reservations:
          memory: 2g
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped

  search_api:
    build:
      context: .
      dockerfile: services/search/Dockerfile
    container_name: semantic-doc-finder-search-api
    ports:
      - "${SEARCH_API_PORT:-8001}:8001"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-semanticuser}:${POSTGRES_PASSWORD:-semantic2024}@postgres:5432/${POSTGRES_DB:-semantic_doc_finder}
      QDRANT_URL: ${QDRANT_URL:-}
      OLLAMA_URL: http://semantic-doc-finder-ollama:11434
      DEFAULT_MODEL: ${DEFAULT_MODEL:-mistral}
      SEARCH_MODEL: ${SEARCH_MODEL:-gemma2:2b}  # Neues Search-Modell
      PYTHONUNBUFFERED: 1
      USE_N8N_ENHANCEMENT: "true"
      N8N_WEBHOOK_BASE: "http://n8n:5678"
      ENABLE_DOWNLOAD_ENDPOINT: "true"
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - semantic_network
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 256m
    restart: on-failure:3  # Restart bei Fehlern, max 3 Versuche

  # === WORKFLOW LAYER ===
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: semantic-doc-finder-n8n
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-semantic_doc_finder}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-semanticuser}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-semantic2024}
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-semantic2024}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-semantic-doc-finder-key-2024}
      N8N_HOST: 0.0.0.0
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: http://localhost:${N8N_PORT:-5678}/
      GENERIC_TIMEZONE: ${TZ:-Europe/Berlin}
      OLLAMA_URL: http://semantic-doc-finder-ollama:11434
      DEFAULT_MODEL: ${DEFAULT_MODEL:-mistral}
      SEARCH_MODEL: ${SEARCH_MODEL:-gemma2:2b}  # F端r N8N Search Enhancement
      SEARCH_API_URL: "http://search_api:8001"
      ENABLE_SEARCH_ENHANCEMENT: "true"
    volumes:
      - ${N8N_DATA_PATH:-./n8n_data}:/home/node/.n8n
      - ./n8n/workflows:/workflows
      - ${DOCUMENTS_PATH:-./data}:/data
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - semantic_network
    deploy:
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 128m
    restart: unless-stopped

  # === UI LAYER ===
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: semantic-doc-finder-open-webui
    ports:
      - "${WEBUI_PORT:-8080}:8080"
    environment:
      # Ollama Integration
      OLLAMA_BASE_URL: http://semantic-doc-finder-ollama:11434
      
      # Search API Integration (OpenAI-kompatibel)
      OPENAI_API_KEY: "dummy-key-not-needed"
      OPENAI_API_BASE_URL: "http://search_api:8001/v1"  # NUR EINMAL DEFINIERT!
      
      # WebUI Settings (aus .env)
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-change-this-secret-key-in-production}
      
      # Authentication & Admin Account
      WEBUI_AUTH: ${WEBUI_AUTH:-true}
      ENABLE_SIGNUP: ${ENABLE_SIGNUP:-true}
      DEFAULT_USER_ROLE: ${DEFAULT_USER_ROLE:-user}
      
      # Pre-configured Admin (optional)
      SUPERUSER_EMAIL: ${WEBUI_ADMIN_EMAIL:-}
      SUPERUSER_PASSWORD: ${WEBUI_ADMIN_PASSWORD:-}
      SUPERUSER_NAME: ${WEBUI_ADMIN_NAME:-}
      
      # System Settings
      TIMEZONE: ${TZ:-Europe/Berlin}
      
      # Advanced Features
      ENABLE_RAG_WEB_SEARCH: true
      ENABLE_RAG_FILE_UPLOAD: true
      RAG_TOP_K: 5
      
      # Custom Models Integration
      ENABLE_MODEL_FILTER: false
      # Enable feedback buttons
      ENABLE_MESSAGE_RATING: "true"
      # Webhook for feedback
      FEEDBACK_WEBHOOK_URL: "http://search_api:8001/feedback"
    volumes:
      - ${WEBUI_DATA_PATH:-./open_webui_data}:/app/backend/data
      - ${DOCUMENTS_PATH:-./data}:/app/uploads:ro
    networks:
      - semantic_network
    depends_on:
      search_api:
        condition: service_started
      ollama:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 256m
    restart: unless-stopped

networks:
  semantic_network:
    driver: bridge