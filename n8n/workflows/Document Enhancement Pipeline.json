{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 5,
              "unit": "minutes"
            }
          ]
        }
      },
      "id": "86037974-0928-4929-8e5d-95f2123c77f6",
      "name": "Night Enhancement Trigger1",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1808,
        32
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Get ENHANCEMENT tasks from processing_queue (inklusive stuck tasks)\nSELECT \n  pq.id as queue_id,\n  pq.document_id,\n  pq.task_type,\n  pq.priority,\n  d.original_name,\n  d.file_type\nFROM processing_queue pq\nJOIN documents d ON pq.document_id = d.id\nWHERE (pq.status = 'pending' \n   OR (pq.status = 'processing' AND pq.started_at < NOW() - INTERVAL '10 minutes'))\n  AND pq.task_type = 'enhance'\n  AND d.status = 'completed' \n  AND pq.task_type = 'enhance'\n  AND d.status = 'completed'\nORDER BY pq.priority DESC, pq.created_at ASC\nLIMIT 1;",
        "options": {}
      },
      "id": "ac43a37c-99fc-4559-899a-6d65a7c85511",
      "name": "Get Enhancement Tasks1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -1584,
        -64
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.queue_id }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "2e0fbad0-87eb-4a4f-ad9f-dc1bb4696890",
      "name": "Check Tasks Available1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1136,
        -64
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM processing_queue \nWHERE task_type = 'enhance' \nORDER BY created_at DESC;",
        "options": {}
      },
      "id": "12e8d405-7a47-4e3a-ab35-79b53f633839",
      "name": "Mark Task Processing1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -912,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Der ursprüngliche Query aus deinem System\nSELECT\n    id AS chunk_id,\n    document_id,\n    content,\n    content_type,\n    chunk_index,\n    page_number,\n    (SELECT original_name FROM documents WHERE id = chunks.document_id) AS original_name,\n    metadata\nFROM chunks\nWHERE status = 'raw';\n",
        "options": {}
      },
      "id": "0b3ecf34-1e0e-4882-b372-9bef490e64af",
      "name": "Get Document Chunks1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -688,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =================================================================\n// PREPARE LLM PROCESSING1 - SEMANTIC DOCUMENT FINDER SPECIFIC\n// =================================================================\n\nconst chunk = $input.first().json;\nconst task = $('Get Enhancement Tasks1').first().json;\n\nconsole.log(`Processing chunk ${chunk.chunk_id} from ${chunk.original_name}`);\n\nconst content = chunk.content || '';\nconst contentType = chunk.content_type || 'text';\n\n// =================================================================\n// ENHANCEMENT PROMPT GENERATION (SEMANTIC DOCUMENT FINDER)\n// =================================================================\n\nlet enhancementPrompt = '';\n\nif (contentType === 'table' || content.includes('|') || /\\t.*\\t/.test(content)) {\n  // TABLE ENHANCEMENT FOR DOCUMENT MANAGEMENT\n  enhancementPrompt = `Du bist ein OCR-Korrekturassistent für ein Dokumentenmanagementsystem. Verbessere diese Tabellendaten:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler in der Tabellenstruktur\n2. Standardisiere Format und Spaltenausrichtung\n3. Bewahre alle Zahlen, Daten und Referenzen exakt\n4. Verbessere Lesbarkeit für Volltextsuche\n5. Repariere gebrochene Zeilen und Zellen\n6. Entferne doppelte Leerzeichen/Zeichen\n\nWICHTIG: Gib NUR die korrigierte Tabelle zurück, keine Erklärungen.`;\n\n} else if (contentType === 'image') {\n  // IMAGE/DIAGRAM ENHANCEMENT FOR SEARCHABILITY\n  enhancementPrompt = `Du bist ein OCR-Assistent für Dokumentenmanagement. Verbessere diese Bildbeschreibung:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler im erkannten Text\n2. Verbessere Beschreibung für Suchbarkeit\n3. Identifiziere Diagramm-/Chart-Elemente\n4. Extrahiere wichtige Begriffe und Zahlen\n5. Beschreibe Kontext für semantische Suche\n\nWICHTIG: Gib NUR die verbesserte Beschreibung zurück, keine Erklärungen.`;\n\n} else {\n  // TEXT ENHANCEMENT FOR SEMANTIC SEARCH\n  enhancementPrompt = `Du bist ein OCR-Korrekturassistent für ein semantisches Dokumentenmanagementsystem. Verbessere diesen Text:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler und Tippfehler\n2. Verbessere Grammatik und Satzstruktur\n3. Bewahre alle Fakten, Namen, Daten und Referenzen exakt\n4. Verwende professionelle deutsche Sprache\n5. Optimiere für Volltextsuche und semantische Verknüpfung\n6. Repariere Worttrennungen und Zeilenumbrüche\n7. Behalte ursprüngliche Länge bei\n\nWICHTIG: Gib NUR den korrigierten Text zurück, keine Erklärungen oder Kommentare.`;\n}\n\n// =================================================================\n// CATEGORIZATION PROMPT (SEMANTIC DOCUMENT FINDER SPECIFIC)\n// =================================================================\n\nconst categorizationPrompt = `Du bist ein Metadaten-Extraktionsassistent für ein DSGVO-konformes Dokumentenmanagementsystem. Analysiere diesen Inhalt:\n\n\"${content.substring(0, 800)}...\"\n\nErstelle eine JSON-Antwort mit folgender Struktur:\n{\n  \"categories\": [\"Kategorie1\", \"Kategorie2\"],\n  \"key_topics\": [\"Thema1\", \"Thema2\", \"Thema3\"],\n  \"extracted_metadata\": {\n    \"keywords\": [\"Suchbegriff1\", \"Suchbegriff2\"],\n    \"entities\": [\"Organisation1\", \"Produkt1\"],\n    \"summary\": \"Kurze Zusammenfassung\",\n    \"document_type\": \"Dokumenttyp\"\n  },\n  \"detected_references\": [\"Verweis1\", \"Verweis2\"],\n  \"business_relevance\": \"high|medium|low\"\n}\n\nKATEGORIEN (wähle passende aus):\n- Rechnung/Invoice\n- Vertrag/Vereinbarung\n- Bericht/Analyse\n- Korrespondenz/Email\n- Technische Dokumentation\n- Handbuch/Manual\n- Formular/Antrag\n- Präsentation/Schulung\n- Protokoll/Meeting\n- Richtlinie/Policy\n\nRICHTLINIEN:\n- Key topics: Wichtigste Themen für semantische Suche (max 5)\n- Keywords: Deutsche Suchbegriffe ohne PII (max 8)\n- Entities: Firmen, Produkte, Systeme (KEINE Personennamen!)\n- Summary: 1-2 Sätze, DSGVO-konform\n- Document type: Hauptzweck des Dokuments\n- References: Erwähnte Dokumente, Anhänge, Kapitel\n- Business relevance: Geschäftliche Wichtigkeit\n\nDATENSCHUTZ: Entferne/ignoriere E-Mails, Telefonnummern, IBANs und Personennamen!\n\nAntworte NUR mit dem JSON-Objekt, keine weiteren Texte.`;\n\n// =================================================================\n// RETURN STRUCTURED DATA FOR SEMANTIC DOCUMENT FINDER\n// =================================================================\n\nreturn [{\n  json: {\n    chunk_id: chunk.chunk_id,\n    document_id: chunk.document_id,\n    original_content: content,\n    content_type: contentType,\n    chunk_index: chunk.chunk_index,\n    page_number: chunk.page_number,\n    original_name: chunk.original_name,\n    enhancement_prompt: enhancementPrompt,\n    categorization_prompt: categorizationPrompt,\n    processing_start: new Date().toISOString(),\n    queue_id: task.queue_id,\n    \n    // Semantic Document Finder specific metadata\n    content_length: content.length,\n    system_version: \"semantic-doc-finder-v2\",\n    privacy_compliant: true,\n    search_optimized: true,\n    prompt_strategy: contentType === 'table' ? 'table_ocr_correction' : \n                    contentType === 'image' ? 'image_content_extraction' : 'text_enhancement_search'\n  }\n}];"
      },
      "id": "5b5a8023-d415-4cbe-9ac5-5b48b8c8ace6",
      "name": "Prepare LLM Processing1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        -160
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://semantic-doc-finder-ollama:11434/api/generate",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $env.DEFAULT_MODEL || 'mistral' }}"
            },
            {
              "name": "prompt",
              "value": "={{ $json.enhancement_prompt }}"
            },
            {
              "name": "stream",
              "value": false
            },
            {
              "name": "options",
              "value": {
                "temperature": 0.1,
                "top_p": 0.9
              }
            }
          ]
        },
        "options": {}
      },
      "id": "70066b1e-eb65-41e3-8a99-e6b5b2612ce2",
      "name": "LLM Enhancement1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -16,
        -256
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://semantic-doc-finder-ollama:11434/api/generate",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $env.DEFAULT_MODEL || 'mistral' }}"
            },
            {
              "name": "prompt",
              "value": "={{ $json.categorization_prompt }}"
            },
            {
              "name": "stream",
              "value": false
            },
            {
              "name": "options",
              "value": {
                "temperature": 0.3,
                "top_p": 0.9
              }
            }
          ]
        },
        "options": {}
      },
      "id": "f8310026-b0fe-44fc-9dfd-638434501072",
      "name": "LLM Categorization1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -16,
        -64
      ]
    },
    {
      "parameters": {
        "jsCode": "// =================================================================\n// COMBINE RESULTS1\n// =================================================================\n\nconst chunk          = $('Prepare LLM Processing1').first().json;\nconst enhancement    = $('LLM Enhancement1').first().json;\nconst categorization = $('LLM Categorization1').first().json;\n\nconsole.log(`Combining LLM results for chunk ${chunk.chunk_id}`);\n\n// Hilfsfunktion fürs Parsing der LLM-Antwort\nfunction safeParse(response, fallback = {}) {\n  try {\n    const txt = response.response || response.text || '';\n    const m   = txt.match(/\\{[\\s\\S]*\\}/);\n    return m ? JSON.parse(m[0]) : fallback;\n  } catch {\n    return fallback;\n  }\n}\n\nconst enhRes = safeParse(enhancement);\nconst catRes = safeParse(categorization);\nconst confidence = enhRes.confidence_score || 0;\n\nconst enhancedChunk = {\n  chunk_id:              chunk.chunk_id,\n  document_id:           chunk.document_id,\n  original_content:      chunk.original_content,\n  content_type:          chunk.content_type,\n  chunk_index:           chunk.chunk_index,\n  page_number:           chunk.page_number,\n  original_name:         chunk.original_name,\n\n  // Hier die Prompts aus dem Prepare‑Node übernehmen:\n  enhancement_prompt:    chunk.enhancement_prompt,\n  categorization_prompt: chunk.categorization_prompt,\n\n  enhancement_model:     process.env.DEFAULT_MODEL || 'mistral',\n  enhanced_content:      enhRes.enhanced_text    || chunk.original_content,\n  confidence_score:      confidence,\n  quality_score:         Math.min(1, confidence + 0.1),\n  manual_review_needed:  confidence < 0.6,\n  business_relevance:    catRes.business_relevance || 'medium',\n\n  processing_time_ms:    Date.now() - new Date(chunk.processing_start).getTime(),\n  queue_id:              chunk.queue_id\n};\n\nconsole.log(`Enhanced chunk ready – confidence=${confidence}, quality=${enhancedChunk.quality_score}`);\n\nreturn [\n  {\n    json: enhancedChunk\n  }\n];\n"
      },
      "id": "d1a360fb-7246-438d-84eb-b9335b37f5ca",
      "name": "Combine Results1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        -160
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Insert into enhanced_chunks table (NEW STRUCTURE)\nINSERT INTO enhanced_chunks (\n  document_id,\n  original_chunk_id,\n  chunk_index,\n  enhanced_content,\n  original_content,\n  categories,\n  extracted_metadata,\n  detected_references,\n  key_topics,\n  content_type,\n  page_number,\n  enhancement_model,\n  confidence_score,\n  processing_time,\n  quality_score,\n  manual_review_needed\n) VALUES (\n  '{{ $json.document_id }}'::uuid,\n  '{{ $json.original_chunk_id }}'::uuid,\n  {{ $json.chunk_index }},\n  '{{ $json.enhanced_content }}',\n  '{{ $json.original_content }}',\n  '{{ $json.categories }}'::jsonb,\n  '{{ $json.extracted_metadata }}'::jsonb,\n  '{{ $json.detected_references }}'::jsonb,\n  '{{ $json.key_topics }}'::jsonb,\n  '{{ $json.content_type }}',\n  {{ $json.page_number }},\n  '{{ $json.enhancement_model }}',\n  {{ $json.confidence_score }},\n  {{ $json.processing_time }},\n  {{ $json.quality_score }},\n  {{ $json.manual_review_needed }}\n)\nRETURNING id, confidence_score, quality_score;",
        "options": {}
      },
      "id": "7410eab8-ad60-4d67-8f8e-2fae828b405f",
      "name": "Save Enhanced Chunk1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        528,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Check if all chunks for this document are enhanced\nWITH document_stats AS (\n  SELECT \n    COUNT(c.id) as total_chunks,\n    COUNT(ec.id) as enhanced_chunks\n  FROM chunks c\n  LEFT JOIN enhanced_chunks ec ON c.id = ec.original_chunk_id\n  WHERE c.document_id = '{{ $('Combine Results1').item.json.document_id }}'::uuid\n    AND c.status NOT IN ('archived', 'deleted')\n)\nSELECT \n  CASE \n    WHEN enhanced_chunks >= total_chunks THEN 'completed'\n    ELSE 'processing'\n  END as task_status,\n  total_chunks,\n  enhanced_chunks\nFROM document_stats;",
        "options": {}
      },
      "id": "e94b438c-cbf9-4fd8-816e-ad581deb1cef",
      "name": "Check Completion1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        880,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Stuck enhance tasks zurücksetzen (älter als 10 Minuten):\nUPDATE processing_queue \nSET status = 'pending', started_at = NULL\nWHERE task_type = 'enhance' \n  AND status = 'processing' \n  AND started_at < NOW() - INTERVAL '10 minutes';\n\n-- Check das Ergebnis:\nUPDATE processing_queue \nSET status = 'completed',\n    completed_at = NOW()\nWHERE id = '{{ $(\"Get Enhancement Tasks1\").item.json.queue_id }}'::uuid\nRETURNING id, status;",
        "options": {}
      },
      "id": "1b0e5b96-0409-4514-a034-bb6a310a7260",
      "name": "Complete Task1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        1104,
        -160
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// =================================================================\n// PREPARE LLM PROCESSING1 - SEMANTIC DOCUMENT FINDER SPECIFIC\n// =================================================================\n\nconst chunk = $input.first().json;\nconst task = $('Get Enhancement Tasks1').first().json;\n\nconsole.log(`Processing chunk ${chunk.chunk_id} from ${chunk.original_name}`);\n\nconst content = chunk.content || '';\nconst contentType = chunk.content_type || 'text';\n\n// =================================================================\n// ENHANCEMENT PROMPT GENERATION (SEMANTIC DOCUMENT FINDER)\n// =================================================================\n\nlet enhancementPrompt = '';\n\nif (contentType === 'table' || content.includes('|') || /\\t.*\\t/.test(content)) {\n  // TABLE ENHANCEMENT FOR DOCUMENT MANAGEMENT\n  enhancementPrompt = `Du bist ein OCR-Korrekturassistent für ein Dokumentenmanagementsystem. Verbessere diese Tabellendaten:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler in der Tabellenstruktur\n2. Standardisiere Format und Spaltenausrichtung\n3. Bewahre alle Zahlen, Daten und Referenzen exakt\n4. Verbessere Lesbarkeit für Volltextsuche\n5. Repariere gebrochene Zeilen und Zellen\n6. Entferne doppelte Leerzeichen/Zeichen\n\nWICHTIG: Gib NUR die korrigierte Tabelle zurück, keine Erklärungen.`;\n\n} else if (contentType === 'image') {\n  // IMAGE/DIAGRAM ENHANCEMENT FOR SEARCHABILITY\n  enhancementPrompt = `Du bist ein OCR-Assistent für Dokumentenmanagement. Verbessere diese Bildbeschreibung:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler im erkannten Text\n2. Verbessere Beschreibung für Suchbarkeit\n3. Identifiziere Diagramm-/Chart-Elemente\n4. Extrahiere wichtige Begriffe und Zahlen\n5. Beschreibe Kontext für semantische Suche\n\nWICHTIG: Gib NUR die verbesserte Beschreibung zurück, keine Erklärungen.`;\n\n} else {\n  // TEXT ENHANCEMENT FOR SEMANTIC SEARCH\n  enhancementPrompt = `Du bist ein OCR-Korrekturassistent für ein semantisches Dokumentenmanagementsystem. Verbessere diesen Text:\n\n\"${content}\"\n\nAufgaben:\n1. Korrigiere OCR-Fehler und Tippfehler\n2. Verbessere Grammatik und Satzstruktur\n3. Bewahre alle Fakten, Namen, Daten und Referenzen exakt\n4. Verwende professionelle deutsche Sprache\n5. Optimiere für Volltextsuche und semantische Verknüpfung\n6. Repariere Worttrennungen und Zeilenumbrüche\n7. Behalte ursprüngliche Länge bei\n\nWICHTIG: Gib NUR den korrigierten Text zurück, keine Erklärungen oder Kommentare.`;\n}\n\n// =================================================================\n// CATEGORIZATION PROMPT (SEMANTIC DOCUMENT FINDER SPECIFIC)\n// =================================================================\n\nconst categorizationPrompt = `Du bist ein Metadaten-Extraktionsassistent für ein DSGVO-konformes Dokumentenmanagementsystem. Analysiere diesen Inhalt:\n\n\"${content.substring(0, 800)}...\"\n\nErstelle eine JSON-Antwort mit folgender Struktur:\n{\n  \"categories\": [\"Kategorie1\", \"Kategorie2\"],\n  \"key_topics\": [\"Thema1\", \"Thema2\", \"Thema3\"],\n  \"extracted_metadata\": {\n    \"keywords\": [\"Suchbegriff1\", \"Suchbegriff2\"],\n    \"entities\": [\"Organisation1\", \"Produkt1\"],\n    \"summary\": \"Kurze Zusammenfassung\",\n    \"document_type\": \"Dokumenttyp\"\n  },\n  \"detected_references\": [\"Verweis1\", \"Verweis2\"],\n  \"business_relevance\": \"high|medium|low\"\n}\n\nKATEGORIEN (wähle passende aus):\n- Rechnung/Invoice\n- Vertrag/Vereinbarung\n- Bericht/Analyse\n- Korrespondenz/Email\n- Technische Dokumentation\n- Handbuch/Manual\n- Formular/Antrag\n- Präsentation/Schulung\n- Protokoll/Meeting\n- Richtlinie/Policy\n\nRICHTLINIEN:\n- Key topics: Wichtigste Themen für semantische Suche (max 5)\n- Keywords: Deutsche Suchbegriffe ohne PII (max 8)\n- Entities: Firmen, Produkte, Systeme (KEINE Personennamen!)\n- Summary: 1-2 Sätze, DSGVO-konform\n- Document type: Hauptzweck des Dokuments\n- References: Erwähnte Dokumente, Anhänge, Kapitel\n- Business relevance: Geschäftliche Wichtigkeit\n\nDATENSCHUTZ: Entferne/ignoriere E-Mails, Telefonnummern, IBANs und Personennamen!\n\nAntworte NUR mit dem JSON-Objekt, keine weiteren Texte.`;\n\n// =================================================================\n// RETURN STRUCTURED DATA FOR SEMANTIC DOCUMENT FINDER\n// =================================================================\n\nreturn [{\n  json: {\n    chunk_id: chunk.chunk_id,\n    document_id: chunk.document_id,\n    original_content: content,\n    content_type: contentType,\n    chunk_index: chunk.chunk_index,\n    page_number: chunk.page_number,\n    original_name: chunk.original_name,\n    enhancement_prompt: enhancementPrompt,\n    categorization_prompt: categorizationPrompt,\n    processing_start: new Date().toISOString(),\n    queue_id: task.queue_id,\n    \n    // Semantic Document Finder specific metadata\n    content_length: content.length,\n    system_version: \"semantic-doc-finder-v2\",\n    privacy_compliant: true,\n    search_optimized: true,\n    prompt_strategy: contentType === 'table' ? 'table_ocr_correction' : \n                    contentType === 'image' ? 'image_content_extraction' : 'text_enhancement_search'\n  }\n}];"
      },
      "id": "a1b01443-ff80-4c68-ab0d-307fe1e14f8f",
      "name": "Log Success1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "console.log('=== NO ENHANCEMENT TASKS ===');\nconsole.log('Time:', new Date().toISOString());\nconsole.log('Status: All documents enhanced or no pending enhancement tasks');\nconsole.log('============================');\nreturn [{\n  message: 'No enhancement tasks found',\n  timestamp: new Date().toISOString(),\n  status: 'idle'\n}];"
      },
      "id": "21c81356-fd1f-495e-8ea6-7c0a0174549d",
      "name": "Log No Tasks1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        32
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\n// Output all input data\nconsole.log('🔍 Input data:', JSON.stringify(input, null, 2));\n// If body is nested\nif (input.body) {\n  console.log('📦 body:', JSON.stringify(input.body, null, 2));\n}\nreturn [{\njson: input\n}];"
      },
      "id": "9c43fe63-0b83-4eba-b685-b641db92b9cb",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1584,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first();\nconsole.log('=== ENHANCEMENT TASKS QUERY RESULT ===');\nconsole.log('Raw input:', JSON.stringify(input, null, 2));\n\n// Check if we got SQL results\nif (!input || !input.json) {\n    console.log('❌ No input data received');\n    return [];\n}\n\nconst result = input.json;\nconsole.log('SQL result:', JSON.stringify(result, null, 2));\n\n// Check if we have enhancement task data\nif (result && result.queue_id) {\n    console.log(`✅ Found enhancement task:`);\n    console.log(`   • Queue ID: ${result.queue_id}`);\n    console.log(`   • Document ID: ${result.document_id}`);\n    console.log(`   • File: ${result.original_name}`);\n    console.log(`   • Type: ${result.file_type}`);\n    console.log(`   • Priority: ${result.priority}`);\n    \n    // Return formatted data for next node\n    return [{\n      json: {\n        queue_id: result.queue_id,\n        document_id: result.document_id,\n        task_type: result.task_type,\n        priority: result.priority,\n        original_name: result.original_name,\n        file_type: result.file_type,\n        hasTask: true \n      }\n    }];\n} else {\n    console.log('❌ No enhancement tasks found in queue');\n    console.log('   • Check if OCR agent creates enhance tasks');\n    console.log('   • Check processing_queue table manually');\n    \n    // Return empty indicator for IF node\n    return [{\n        queue_id: null,\n        hasTask: false,\n        message: 'No enhancement tasks pending'\n    }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        -64
      ],
      "id": "559a4e6f-712a-4ffb-a2b0-56526978c2d0",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.all();\nconst chunks = [];\n\nfor (let i = 0; i < input.length; i++) {\n    const item = input[i];\n    const chunk = item.json;\n\n    if (chunk && chunk.chunk_id) {\n        chunks.push({\n            json: {\n                chunk_id: chunk.chunk_id,\n                document_id: chunk.document_id,\n                content: chunk.content,\n                content_type: chunk.content_type,\n                chunk_index: chunk.chunk_index,\n                page_number: chunk.page_number,\n                original_name: chunk.original_name,\n                metadata: chunk.metadata\n            }\n        });\n    } else {\n        console.log(`❌ Invalid chunk at index ${i}`, JSON.stringify(chunk, null, 2));\n    }\n}\n\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -464,
        -160
      ],
      "id": "29fc9039-1f97-4a70-b5d4-f5ef1696e564",
      "name": "Code2"
    },
    {
      "parameters": {
        "mode": "chooseBranch"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        208,
        -160
      ],
      "id": "dbb4b693-35c9-4ecc-bad5-ae0b9c79df2a",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM chunks\nWHERE id = '{{ $(\"Combine Results1\").item.json.chunk_id }}'\n  AND '{{ $(\"Combine Results1\").item.json.manual_review_needed }}'::boolean = false\n  AND NOT EXISTS (\n    SELECT 1 FROM search_history \n    WHERE created_at > NOW() - INTERVAL '2 minutes'\n  )\n  AND NOT EXISTS (\n    -- Prüfe aktive N8N Search Workflows\n    SELECT 1 FROM information_schema.processlist \n    WHERE info LIKE '%search%' OR info LIKE '%SELECT%enhanced_chunks%'\n  );",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        720,
        -160
      ],
      "id": "ec377e25-0fa2-44ea-9ede-0266e3eda086",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Night Enhancement Trigger1": {
      "main": [
        [
          {
            "node": "Get Enhancement Tasks1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Enhancement Tasks1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Tasks Available1": {
      "main": [
        [
          {
            "node": "Mark Task Processing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log No Tasks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Task Processing1": {
      "main": [
        [
          {
            "node": "Get Document Chunks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Document Chunks1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare LLM Processing1": {
      "main": [
        [
          {
            "node": "LLM Enhancement1",
            "type": "main",
            "index": 0
          },
          {
            "node": "LLM Categorization1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Enhancement1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Categorization1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Combine Results1": {
      "main": [
        [
          {
            "node": "Save Enhanced Chunk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Enhanced Chunk1": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Completion1": {
      "main": [
        [
          {
            "node": "Complete Task1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Complete Task1": {
      "main": [
        [
          {
            "node": "Log Success1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Check Tasks Available1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Prepare LLM Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Combine Results1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Check Completion1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e2fa3c67-655e-4410-aa1a-f262c60472e3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ea5d82e8e516069c37d2848a89101cd5249268f1ee9ad27e6599d64c520de1dd"
  },
  "id": "WeWJJZcUdlOsdNdK",
  "tags": [
    {
      "createdAt": "2025-07-19T07:28:56.241Z",
      "updatedAt": "2025-07-19T07:28:56.241Z",
      "id": "4eFDUzvaGfSTVbz0",
      "name": "semantic-doc-finder"
    }
  ]
}