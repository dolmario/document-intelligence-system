{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "doc-upload",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "99612095-2ada-4b62-8dab-0070e2084bbe",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -880,
        112
      ],
      "webhookId": "semantic-doc-upload"
    },
    {
      "parameters": {
        "functionCode": "const uploadData = $input.first().json.body || $input.first().json;\n\nconsole.log('Received upload data:', JSON.stringify(uploadData, null, 2));\n\nconst requiredFields = ['fileName', 'fileType'];\nconst missingFields = [];\n\nfor (const field of requiredFields) {\n  if (!uploadData[field]) {\n    missingFields.push(field);\n  }\n}\n\nconst filePath = uploadData.filePath || uploadData.metadata?.file_path;\nconst fileContent = uploadData.fileContent;\n\nif (!filePath && !fileContent) {\n  missingFields.push('filePath or fileContent');\n}\n\nif (missingFields.length > 0) {\n  throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n}\n\nconst processedData = {\n  fileName: uploadData.fileName.trim(),\n  fileType: uploadData.fileType.toLowerCase().trim(),\n  filePath: filePath ? filePath.trim() : \"[inlined]\",\n  fileSize: uploadData.fileSize || 0,\n  metadata: JSON.stringify({\n    upload_timestamp: new Date().toISOString(),\n    upload_method: 'n8n_webhook',\n    original_metadata: uploadData.metadata || {},\n    source: uploadData.source || 'unknown'\n  }),\n  priority: (() => {\n    const type = uploadData.fileType.toLowerCase();\n    if (type.includes('pdf')) return 8;\n    if (type.includes('image')) return 7;\n    if (type.includes('doc')) return 6;\n    return 5;\n  })()\n};\n\nif (processedData.fileSize > 0) {\n  processedData.estimatedPages = Math.max(1, Math.floor(processedData.fileSize / 100000));\n} else {\n  processedData.estimatedPages = 1;\n}\n\nconsole.log('Processed upload data:', JSON.stringify(processedData, null, 2));\n\nreturn [processedData];\n"
      },
      "id": "3f363ddb-c2be-44a5-8db9-723ae2a70c76",
      "name": "Process Upload Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH new_doc AS (\n  INSERT INTO documents (\n    source_id,\n    original_name,\n    file_type,\n    file_size,\n    metadata,\n    status,\n    created_at\n  )\n  VALUES (\n    (SELECT id FROM sources WHERE name = 'n8n_upload' LIMIT 1),\n    $1,\n    $2,\n    $3,\n    $4::jsonb,\n    'uploaded',\n    NOW()\n  )\n  RETURNING id, original_name, file_type, file_size\n)\nINSERT INTO processing_queue (\n  document_id,\n  task_type,\n  priority,\n  payload,\n  status,\n  created_at\n)\nSELECT\n  id,\n  'extract',\n  $5,\n  jsonb_build_object(\n    'document_name', original_name,\n    'file_type', file_type,\n    'file_size', file_size,\n    'processing_type', 'ocr_extraction',\n    'estimated_pages', $6,\n    'queued_at', NOW()\n  ),\n  'pending',\n  NOW()\nFROM new_doc\nRETURNING \n  (SELECT id FROM new_doc) as document_id,\n  id as queue_id,\n  task_type,\n  priority;\n",
        "options": {
          "queryReplacement": "=[   \"={{ $json.fileName }}\",   \"={{ $json.fileType }}\",   \"={{ $json.fileSize }}\",   \"={{ $json.metadata }}\",   \"={{ $json.priority }}\",   \"={{ $json.estimatedPages }}\" ]"
        }
      },
      "id": "5152b9f3-d7d3-41c7-8542-f6f72de3c84c",
      "name": "Create Document + Queue Entry",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -448,
        112
      ],
      "credentials": {
        "postgres": {
          "id": "YodbkFWc2fWtqLl3",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "dateTime": [],
          "number": [],
          "string": [
            {
              "value1": "={{ $json.document_id }}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "cced4035-8ffe-469e-b4ed-15d9714a2efc",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -224,
        112
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"message\": \"Document uploaded successfully and queued for processing\",\n  \"data\": {\n    \"document_id\": {{ $('Create Document + Queue Entry').item.json.document_id }},\n    \"queue_id\": {{ $('Create Document + Queue Entry').item.json.queue_id }},\n    \"filename\": \"{{ $('Process Upload Data').item.json.fileName }}\",\n    \"file_type\": \"{{ $('Process Upload Data').item.json.fileType }}\",\n    \"status\": \"queued_for_ocr_processing\",\n    \"priority\": {{ $('Create Document + Queue Entry').item.json.priority }},\n    \"queued_at\": \"{{ new Date().toISOString() }}\"\n  }\n}",
        "options": {
          "responseCode": 201
        }
      },
      "id": "08f62087-e29f-4476-8082-923d8c66c2b9",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"error\": \"Upload failed\",\n  \"message\": \"Document could not be uploaded or queued for processing\",\n  \"details\": \"{{ $error.message || 'Unknown error occurred' }}\",\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "responseCode": 500
        }
      },
      "id": "244984bd-e40a-4937-a440-99446edac259",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        0,
        208
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Process Upload Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Upload Data": {
      "main": [
        [
          {
            "node": "Create Document + Queue Entry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document + Queue Entry": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3fded911-6e29-47d9-928a-2257a62e3a50",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ea5d82e8e516069c37d2848a89101cd5249268f1ee9ad27e6599d64c520de1dd"
  },
  "id": "dONahuMG5A3AR3PJ",
  "tags": []
}