{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": 3
            }
          ]
        }
      },
      "name": "Night Job Trigger1",
      "type": "n8n-nodes-base.cron",
      "position": [
        1024,
        320
      ],
      "typeVersion": 1,
      "id": "2e2787b4-8c69-49cd-8bfe-380d3e9fb8fb"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT c.* FROM chunks c JOIN documents d ON c.document_id = d.id WHERE c.status = 'precleaned' AND d.status != 'deleted' LIMIT 100",
        "additionalFields": {}
      },
      "name": "Get Chunks for Enhancement1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1232,
        320
      ],
      "typeVersion": 1,
      "id": "372e28f0-6d0c-4d8c-97a8-016c44cba1fc",
      "credentials": {
        "postgres": {
          "id": "hmqLrdY71tTZPEqJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "={{ $env.DEFAULT_MODEL || 'mistral' }}"
            },
            {
              "name": "prompt",
              "value": "Verbessere den folgenden Text. Korrigiere Rechtschreibfehler, verbessere die Struktur, aber behalte alle wichtigen Informationen:\\n\\n{{ $json.content }}\\n\\nVerbesserte Version:"
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        },
        "options": {}
      },
      "name": "LLM Enhancement1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1424,
        320
      ],
      "typeVersion": 3,
      "id": "86f47100-56cf-4b8b-8395-a1e1f11fc0d3"
    },
    {
      "parameters": {
        "functionCode": "const chunk = $input.first().json;\nconst response = chunk.response || chunk.text || '';\nconst chunkId = chunk.id;\n\nreturn [{\n  id: chunkId,\n  enhanced_content: response\n}];"
      },
      "name": "Prepare Enhanced SQL1",
      "type": "n8n-nodes-base.function",
      "position": [
        1632,
        320
      ],
      "typeVersion": 1,
      "id": "747ab86f-c2e9-4f21-94e1-eaa6d4a050be"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE chunks SET content = $2, status = 'enhanced', enhanced_at = NOW() WHERE id = $1",
        "additionalFields": {}
      },
      "name": "Save Enhanced1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        1824,
        320
      ],
      "typeVersion": 1,
      "id": "3dcaf5ea-f7f8-4521-b978-648f0e4c1889",
      "credentials": {
        "postgres": {
          "id": "hmqLrdY71tTZPEqJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "doc-upload",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        688,
        -64
      ],
      "typeVersion": 1,
      "id": "29306c83-3036-44d7-9135-604d856738f9",
      "webhookId": "doc-upload-test-fixed"
    },
    {
      "parameters": {
        "functionCode": "// Complete Document Processing Node\nconst item = $input.first().json;\nconst body = item.body || {};\n\nconsole.log('Webhook received:', JSON.stringify(body, null, 2));\n\n// Validate required fields\nconst fileName = body.fileName || body.filename || body.name;\nconst fileType = body.fileType || body.filetype || body.type || 'txt';\nconst fileContent = body.fileContent || body.filecontent || body.content || '';\n\nif (!fileName) {\n  throw new Error(`fileName missing. Available fields: ${Object.keys(body).join(', ')}`);\n}\n\nif (!fileContent) {\n  throw new Error(`fileContent/content missing. Available fields: ${Object.keys(body).join(', ')}`);\n}\n\n// Prepare metadata\nconst metadata = {\n  ...body.metadata || {},\n  file_content: fileContent,\n  source: 'n8n',\n  uploadedAt: new Date().toISOString(),\n  original_filename: fileName,\n  processed: false\n};\n\n// Escape single quotes for SQL\nconst escapeSql = (str) => str.replace(/'/g, \"''\");\n\nconst safeFileName = escapeSql(fileName);\nconst safeFileType = escapeSql(fileType);\nconst safeMetadata = escapeSql(JSON.stringify(metadata));\n\n// Generate complete SQL for document insertion\nconst documentSql = `INSERT INTO documents (source_id, original_name, file_type, metadata) VALUES ((SELECT id FROM sources WHERE name = 'n8n_upload' LIMIT 1), '${safeFileName}', '${safeFileType}', '${safeMetadata}'::jsonb) RETURNING id`;\n\nconsole.log('Generated SQL:', documentSql);\n\nreturn [{\n  fileName: fileName,\n  fileType: fileType,\n  documentSql: documentSql,\n  status: 'ready_for_processing'\n}];"
      },
      "name": "Process Document Data",
      "type": "n8n-nodes-base.function",
      "position": [
        896,
        -80
      ],
      "typeVersion": 1,
      "id": "1dbe990f-e70e-4624-bc4d-88f2789e39ff"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        2000,
        0
      ],
      "typeVersion": 1,
      "id": "40f626a6-ac20-451c-aff6-9813c0eb29e5",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"name\": \"status\",\n  \"value\": \"success\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1728,
        -16
      ],
      "id": "c7caf887-9f14-4a7f-a367-188228f4a98d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH new_doc AS (\n  INSERT INTO documents (source_id, original_name, file_type, metadata)\n  VALUES (\n    (SELECT id FROM sources WHERE name = 'n8n_upload' LIMIT 1),\n    $1, $2, $3::jsonb\n  )\n  RETURNING id\n)\nINSERT INTO processing_queue (document_id, task_type, priority)\nSELECT id, 'extract', 8 FROM new_doc\nRETURNING (SELECT id FROM new_doc) as document_id;\n\n\n",
        "options": {
          "queryReplacement": "=[\n  \"{{$json.fileName}}\",\n  \"{{$json.fileType}}\",\n  \"{{$json.metadata}}\"\n]\n\n\n"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1440,
        16
      ],
      "id": "78958c32-44a5-451f-aa09-0251cf48616c",
      "name": "Create Document",
      "credentials": {
        "postgres": {
          "id": "hmqLrdY71tTZPEqJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/// N8N Process Document Data Node \n\nconst item = $input.first().json;\n\nconsole.log('Received item:', JSON.stringify(item, null, 2));\nconsole.log('Available keys:', Object.keys(item));\n\n// Check if this is already processed data (has documentSql)\nif (item.documentSql) {\n  console.log('Data already processed - passing through');\n  \n  // Extract file_content from the documentSql if needed\n  let fileContent = null;\n  if (item.documentSql.includes('file_content')) {\n    const match = item.documentSql.match(/\"file_content\":\"([^\"]+)\"/);\n    if (match) {\n      fileContent = match[1];\n      console.log('Extracted file_content from documentSql:', fileContent.substring(0, 50));\n    }\n  }\n  \n  // Return data with extracted content\n  return [{\n    fileName: item.fileName,\n    fileType: item.fileType,\n    fileContent: fileContent,\n    metadata: {\n      file_content: fileContent,\n      source: 'n8n',\n      uploadedAt: new Date().toISOString(),\n      original_filename: item.fileName,\n      processed: true\n    },\n    status: item.status || 'ready_for_processing'\n  }];\n}\n\n// This is original webhook data - process normally\nconst fileName = item.fileName || item.filename || item.name;\nconst fileType = item.fileType || item.filetype || item.type || 'txt';\nconst fileContent = item.fileContent || item.filecontent || item.content || '';\n\nconsole.log('Processing original webhook data:');\nconsole.log('- fileName:', fileName);\nconsole.log('- fileType:', fileType);\nconsole.log('- fileContent length:', fileContent ? fileContent.length : 'NULL');\n\nif (!fileName) {\n  throw new Error(`fileName missing. Available fields: ${Object.keys(item).join(', ')}`);\n}\n\nif (!fileContent) {\n  throw new Error(`fileContent missing. Available fields: ${Object.keys(item).join(', ')}`);\n}\n\n// Smart content handling - encode to base64 if needed\nlet processedContent = fileContent;\n\nif (fileType === 'txt' || fileType === 'md') {\n  const base64Pattern = /^[A-Za-z0-9+/]*={0,2}$/;\n  if (!base64Pattern.test(fileContent.replace(/\\s/g, ''))) {\n    processedContent = Buffer.from(fileContent, 'utf8').toString('base64');\n    console.log('Encoded plain text content to base64');\n  }\n}\n\nconst metadata = {\n  ...item.metadata || {},\n  file_content: processedContent,\n  source: 'n8n',\n  uploadedAt: new Date().toISOString(),\n  original_filename: fileName,\n  processed: false,\n  content_type: 'base64'\n};\n\nreturn [{\n  fileName: fileName,\n  fileType: fileType,\n  fileContent: processedContent,\n  metadata: metadata,\n  status: 'ready_for_processing'\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -128
      ],
      "id": "1a2da520-08ca-4819-9844-9bab1731b696",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "Night Job Trigger1": {
      "main": [
        [
          {
            "node": "Get Chunks for Enhancement1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chunks for Enhancement1": {
      "main": [
        [
          {
            "node": "LLM Enhancement1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Enhancement1": {
      "main": [
        [
          {
            "node": "Prepare Enhanced SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Enhanced SQL1": {
      "main": [
        [
          {
            "node": "Save Enhanced1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Process Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Document Data": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Create Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "066188c3-17d0-4f2c-8ba6-bcac5e44b8a8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "92268cf0e1ac5f3e7215c6d8377622f8297127868485b08c2d2ff147c192b0b2"
  },
  "id": "qBXbSdCI8Ty7B441",
  "tags": []
}