{
  "name": "Document Processing with File Watcher",
  "nodes": [
    {
      "parameters": {
        "path": "doc-webhook",
        "responseMode": "onReceived",
        "httpMethod": "POST",
        "options": {}
      },
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "doc-webhook"
    },
    {
      "parameters": {
        "command": "find /data -type f -mmin -1 -name '*.pdf' -o -name '*.txt' -o -name '*.jpg' -o -name '*.png' | head -10"
      },
      "name": "Find New Files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [250, 500]
    },
    {
      "parameters": {
        "functionCode": "// Process file list and create tasks\nconst items = [];\nconst stdout = $input.all()[0].json.stdout;\n\nif (stdout && stdout.trim()) {\n  const files = stdout.trim().split('\\n').filter(f => f);\n  \n  for (const filePath of files) {\n    const fileName = filePath.split('/').pop();\n    const fileExt = fileName.split('.').pop().toLowerCase();\n    \n    // Determine task type\n    let taskType = 'index';\n    if (['pdf', 'png', 'jpg', 'jpeg', 'tiff', 'tif'].includes(fileExt)) {\n      taskType = 'ocr';\n    } else if (['txt', 'md', 'csv'].includes(fileExt)) {\n      taskType = 'text';\n    }\n    \n    // Create task\n    const task = {\n      task_id: `n8n_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      file_path: filePath,\n      file_name: fileName,\n      task_type: taskType,\n      source: 'n8n_file_watcher',\n      priority: 5,\n      created_at: new Date().toISOString()\n    };\n    \n    items.push({json: task});\n  }\n}\n\nreturn items.length > 0 ? items : [{json: {message: 'No new files found'}}];"
      },
      "name": "Create Tasks from Files",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 500]
    },
    {
      "parameters": {
        "binaryPropertyName": "data",
        "fileName": "={{$json.file_name}}"
      },
      "name": "Read File Binary",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [650, 500]
    },
    {
      "parameters": {
        "functionCode": "// Convert binary to base64 and enhance task\nconst items = [];\n\nfor (const item of $input.all()) {\n  const task = item.json;\n  \n  if (item.binary && item.binary.data) {\n    // Add base64 content to task\n    task.file_content = item.binary.data.data;\n    task.mime_type = item.binary.data.mimeType || 'application/octet-stream';\n  }\n  \n  items.push({json: task});\n}\n\nreturn items;"
      },
      "name": "Add Base64 Content",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [850, 500]
    },
    {
      "parameters": {
        "operation": "push",
        "list": "processing_queue",
        "messageData": "={{JSON.stringify($json)}}"
      },
      "name": "Push to Redis Queue",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1050, 400],
      "credentials": {
        "redis": {
          "id": "1",
          "name": "Redis"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Process webhook uploads\nconst items = [];\n\nfor (const item of $input.all()) {\n  if (item.binary && item.binary.data) {\n    const binaryData = item.binary.data;\n    \n    const task = {\n      task_id: `webhook_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      file_name: binaryData.fileName || 'upload.bin',\n      file_content: binaryData.data,\n      mime_type: binaryData.mimeType || 'application/octet-stream',\n      task_type: determineTaskType(binaryData.fileName, binaryData.mimeType),\n      source: 'webhook_upload',\n      priority: 5,\n      created_at: new Date().toISOString()\n    };\n    \n    items.push({json: task});\n  } else if (item.json.event === 'file_added' && item.json.file_path) {\n    // Legacy format support\n    const task = {\n      task_id: `legacy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      file_path: item.json.file_path,\n      task_type: 'ocr',\n      source: item.json.source || 'webhook',\n      priority: 5,\n      created_at: new Date().toISOString()\n    };\n    \n    items.push({json: task});\n  }\n}\n\nfunction determineTaskType(fileName, mimeType) {\n  const ext = (fileName || '').toLowerCase().split('.').pop();\n  \n  if (['pdf', 'png', 'jpg', 'jpeg', 'tiff', 'tif'].includes(ext) || \n      (mimeType && mimeType.includes('image'))) {\n    return 'ocr';\n  } else if (['txt', 'md', 'csv'].includes(ext) || \n             (mimeType && mimeType.includes('text'))) {\n    return 'text';\n  }\n  \n  return 'index';\n}\n\nreturn items;"
      },
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Document queued for processing"
            },
            {
              "name": "task_id",
              "value": "={{$json.task_id}}"
            },
            {
              "name": "queue_length",
              "value": "={{$json.queue_length || 'unknown'}}"
            }
          ]
        }
      },
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [50, 500]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Find New Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find New Files": {
      "main": [
        [
          {
            "node": "Create Tasks from Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Tasks from Files": {
      "main": [
        [
          {
            "node": "Read File Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read File Binary": {
      "main": [
        [
          {
            "node": "Add Base64 Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Base64 Content": {
      "main": [
        [
          {
            "node": "Push to Redis Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Push to Redis Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push to Redis Queue": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
